ZAPAMIĘTAJ: nie załatasz całego C++! kod nie musi być perfekcyjny!
ULEPSZAJ TYLKO W KONTEKŚCIE JAKIEGOŚ FICZERA DO JAKIEGOS PROJEKTU

- use DEFINE_ENUM for input key ? two functions would have to be provided: one for normal keys and one for specials
- option to make Expected non ignorable ?
- implicit conversion to bool for enum flags ?
- lastModificationTime is not related to getTime
- Vector::reinterpret moves ?!?!?
- assert shouldnt print itself in backtrace
- std format in ASSERT, FAILED & CHECK ?
- isSame, etc. -> is_same
- fix parsing ? strtol is used for ints, strtoll for unsigned ints..
- Hash<> for user types (not only tied?)
- example Makefile for test/window which uses Makefile.include ?
- try using -fsignaling-nans ?
- anyOf (and others) should be able to accept function pointer ?
- MaybeEnum from fwk_enum
- We could define Size<> for different classes and use it for example in CSpan<T>
  without defining it; Think if this would be useful?
- Rename test files to t_vector, t_stuff ? or lower priority to test in docplugin ?
- HashMap forward declaration ?
- Wstrict-overflow
- proper FIFO support for streams
- drop the fucking shared_ptrs
- StaticPimpl alignment
- fix interval::valid
- subRange dla vectora i spana
- invalid<Type>() could return invalid value (otherwise not accepted, but useful for Maybe)
- Size<Type> can be used instead of sizeof(); it can be specialized thus decreasing dependencies

- function arguments could have invariants in them:
  T Segment::at(Checked<double, [](double v) { return v >= 0.0 && v <= 1.0; })> {}

- Still more advanced asserts would be useful?
- check if gdb is already attached and behave properly in such cases

- Math:
	- length_sq in ISegment ?
	- Box<T, N> as other classes ?
	- segment, box::empty -> degenerate ?
	- isnan checks in all math classes (paranoid in vectors as well ?)
	- ujednolicić: Ray3F, IBox
	-  make Triangle it modifiable? some other classes don't keep any invariants either?
	   but on the other hand, we could add some checks for nans and infinities...
	   add type: FiniteFloat (float which is not a nan and is not an infinity)
	- Box & EnableInDimension doesn't support 4th dimension
	- box ranges...
	- intersection -> intersect ?
	- inset & enlarge na zewnątrz ?
	- minimize use of asRay(), check all places
	- fix isNormalized, areClose ?
	- Think about accuracy of different math functions. Some of tem could be easily improved
	- encloseTransformed wrong order
	- naming: rotateVector(pos)
	- isDegenerate w trójkątach, segmentach, etc.
	- mulPoint, mulNormal: better names

- Kolorki:
	- konwersja kolor na bool (!= ColorId::transparent)
	- wolna konwersja kolorów z ColorId
	- cleanup colors (where ICOLOR, where FColor should be used); Conversion ColorId -> IColor
	  FCOLOr sux (operations only on alpha part or only on color part)

- Input:
	- Mouse grabbing doesnt work
	- Bug: keyDown(InputKey::tab) doesn't work
	- Mouse Position should be -1/-1 or none when mouse is outside of window ?

- fwk_assert powinno być ogólno dostępne, tak żeby wszędzie z tego korzystać
- DASSERTY często nie wystarczają; chcielibyśmy mieć dokładniesze informacje (jakie dane konkretnie są zepsute?)
- możliwość dodania suffixa do ścieżki FilePath (+em?)
- specjalizacje dla Maybe: niektóre typy mogą mieć zdefiniowane niepoprawne wartości
  które można używać zamiast boola!
- konwersja vector na bool (czy pusty)
- można robić struktury drzewiaste bazujące na wektorach! (tak jak robiłeś listę bazując na dwóch wektorach, tak samo
  możesz zrobić z drzewem)

- Promienie bazujące na intach mogą być zaprezentowane za pomocą segmentów; dzięki temu nie
  potrzebne są Rationale

- attach GDB on Ctrl-C
- move SerializeAsPod to namespace detail
- make default serialize_as_pod be based on is_trivially_copyable / etc.
  or maybe not (pointers...)
- change order in FWK_ORDER_BY for vectors ?
- move box to fwk_box ?

- copyable_ptr (unique_ptr but with copying ability (why the hell it doesn't have it?))
- profiler sux; fix it?
- same algorithms on top of dynamic or static structure: ImmutableGraph, MutableGraph share with shared interface ?
- remove math.h, etc from includes for ; On the other hand: they will end up in PCH anyway
- operator== for CRanges ?
- fromString for enums ?

- ref(vector) returns vector<> with reference flag acts as a reference to a vector
  keeping ref(vector) in local context can be more efficient than keeping reference
  that would require keeping ref_count in vector ?

- TaggedId<Type>: id for accessing vector<Type> ? generalize it somehow ?
- Tagged Value, Tagged Pair
- Tagged Type

- Add function for registering some information when assertion fails or exception is thrown or whatever
  like: ASSERT_INFO("While parsing file: %s", file_name.c_str());
- Improve assertions (they should give more information when breaking)...
  But how to do it properly?

- check if double constants are correct
- printing for Variant ?

- SERIALIZE_AS_POD cathces fwk namespace
- model_viewer.exe displays models in different order (findFiles function must be working differently)

- better std::pair ?
- better tests for vector? Use tests from libc++ or something?
- Add some PASSERTs to fwk vector?
- Make custom string class (not a template)
- separate vector allocator specialized with element size
  this allocator could also store some data before first element
- dodać irange do vector-a
- vector[-1] indeksuje od konca?
- shrink_to_fit dla vectora?

- support for multiple armatures in exporter; support for animation without armatures
- make AnimaedMesh similar to AnimatedModel
- add class VertexArraySpec and use it to verify drawcalls
- saving/loading Mesh colors to XML
- Separate model matrix from view matrix in MatrixStack?
- MemorySaver should increase it's size if necessary
- add StrongBaseType<> class
- think about usefulness of const correctness; in some cases were just wasting time
- separate align function for fonts
- Hide HAlign, VAlign inside fontstyle?
- removeIndicies should use materialset
- make makeUnique not use resize (use erase)
- setscissorrect should check if rect is empty or not

- more todos in the code
- Saver, Loader -> SaveStream, LoadStream or similar
- normalize -> normalized

- __attribute__((cold)) on throwException (all code that leads to it
  should be inside cold section)
- clamp doesn't work properly when max < min

- Fix satTest (when edges from two objects are the same, you will get 0 normals)

- VSYNC under windows
- Fix problem in Cache when get_immutable_ptr() return null
- input key tab doesnt work
- use A-buffer for rendering transparent objects (will be useful for SSAO as well)

- Optimize kerning loop in font_factory.cpp
- Fix TODO in filesystem_linux (regarding links).
- In fact, just fix all TODOs
- Think about moving globla functions to classes / namespaces (especially functions in fwk_profile.h)
- scanf's are very slow compared to strto*, maybe we should change printfs as well in text printer?

- ModelNodes should be more flexible when creating (no need for empty root node, nodes with empty names should be ok, etc.)

- tools/model_viewer crashes when wrong path is passed (for example folder instead of path to .model file)

- When LLDB is attached, make it catch all throws automatically
- Serialization of floats to XML isn't accurate; fix it
