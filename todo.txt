ZAPAMIĘTAJ: nie załatasz całego C++! kod nie musi być perfekcyjny!
ULEPSZAJ TYLKO W KONTEKŚCIE JAKIEGOŚ FICZERA DO JAKIEGOS PROJEKTU

- Domyślne atrybuty vertexów nie są częścią VAO!!!
- FrameBuffer -> Framebuffer
- plane_count we frustum
- lepsze interfajsy do wejścia
- CHECK(equal, a, b) -> fwk::assert::equal(a, b) ? ... : else print(args...)
- zapisywanie pozycji okna
- assert_in_range
- transform może konwertować do tego samego typu kontenera (array, vector, smallvector)?

- EnumMap: wywalanie sie w czasie kompilacji przy błędach
  problem jest taki, że konstruktor template <int N> (const (T&)[N]) ma niższy
  lub taki sam priorytet co (CSpan<T>)...

- translacja nazw debugowych ? jakaś możliwość rejestracji template-ów?
- nie da się rozszerzać parsera o typy których nie da się domyślnie konstruować...
- dodać type_align, można by tego używać w SmallVector, np.
- konieczność konwersji flag na boola jest słaba... może explicit nie jest potrzbeny?
- funkcje haszujące nie powinny być w jednym pliku, ale w poszczególnych klasach;
  Można zrobić podobnie jak z formaterami, że się overloaduje jakąś funkcję i już

- nie przesadzaj z czasami kompilacji w libfwk; 
- DrawCalls should have command_id index ?
- Remove Renderer2D (use RenderList); better control over which shader is being used ?
- Shouldn't we register allocations at higher level when current rollback is paused?
  especially when we're passing Errors; how should it work in Streams and similar classes?
  Also: shouldn't allocations be moved to upper level when lower level is dropped (without rollbacking)?
  Also: when object is registered on ROllbackCContext on one thread and then used on another thread ?
- RollbackError type ?
- Rollback::pause / resume better names ?

- tests for Any & UniquePtr
- backtraces on mingw dont work too good...
- ElementBuffer::bbox is causing problems if data is broken in some way; What should we do about it?
- problem: asserty cały czas dają za mało informacji (trzeba często dodawać printfy)
  może po prostu znajdź jakiś sensowny debugger? pod visualem jak kod jest zoptymalizowany
  to też nie działa...
- wyciagnij implementacje << z formatu do math_base / box
- HashMap::keys(), ::values() ?
- add .clang-format ?
- enum all & count could be constexpr vars
- Box: setSize -> resize
- Odpalanie plugina do RTTI w trakcie kompilacji; Ale to co ten plugin wygenerował
  też trzeba będzie skompilować i w jakiś sposób podlinkować;
  Powiedzmy, że miałbym ...

- nie przesadzaj z enkapsulacją? Czy zdażyło ci się chociaż raz spowodować buga
  przez dostęp do zmiennej z implementacji? TODO: zastanow sie

- pair -> Pair; make_pair -> pair
- Better error merging?
- Problem: w ASSERTACH chcemy zawrzeć jak najwęcej informacji a z drugiej strony,
  chcemy, żeby kod był jak najprostszy, czyli np. używamy funkcji valid(id), która
  wszystko chowa..
- maybe xml
- filter w miejscu; niemutowalne może być bardzokosztowne (np. kopiuje cały VoxelMap)

- DEFINE_ENUM_MEMBER doesnt work with EnumFlags<>
- DEFINE_ENUM in private namespace under gcc (no linkage)
- use DEFINE_ENUM for input key ? two functions would have to be provided: one for normal keys and one for specials
- implicit conversion to bool for enum flags ?

- insertBack with move ?

- Lepsza implementacja FileStream ? Nie jest w stanie wykryć czy jest plikiem czy katalogiem...
- Problem with FwdMember: what happens when we're compiling with WPO ?
- FwdMember const refs to Base type ?
- Any -> Variant && Variant -> Any
- Use AnyStorage for Any & Variant ?
- sprawdz wersje gcc / clang na poczatku
- A lot of functions can run in two modes:
  - assuming that everything will succeeed (fails on CHECK / ASSERT if it doesnt)
  - allows for failure, returns Expected<>
  - Expected<>.checked(): better name ?
  Consistent solution for that would be useful...
- We could define Size<> for different classes and use it for example in CSpan<T>
  without defining it; Think if this would be useful?
- type_info do assertów ?
- make RandomSeed not unsigned
- execCommand doesn't retturn error status sometimes?
- Objects could keep information whether they own the data or not
  ref-counting is not required (user is till responsible for not releasing string is some CString
  is still pointing to it)
- Stream guard podobnie jak XMLGuard ?
- XMLLoader error handling
- SpanBase<> for all types with different min_sizes
- XML should assert that string is owned or static...
- use type trai primitives __is_trivially_assignable ...
- Range instead of loops with XMLNode::next()
- Zastanów sie gdzie jeszcze warto by było dodać specyfikacje memberów (&, &&, const &)
- lastModificationTime is not related to getTime
- Vector::reinterpret moves ?!?!?; change it to ink ?
- assert shouldnt print itself in backtrace
- std format in ASSERT, FAILED & CHECK ?
- isSame, etc. -> is_same
- fix parsing ? strtol is used for ints, strtoll for unsigned ints..
- Hash<> for user types (not only tied?)
- example Makefile for test/window which uses Makefile.include ?
- try using -fsignaling-nans ?
- anyOf (and others) should be able to accept function pointer ?
- Rename test files to t_vector, t_stuff ? or lower priority to test in docplugin ?
- HashMap forward declaration ?
- Wstrict-overflow
- proper FIFO support for streams
- drop the fucking shared_ptrs
- StaticPimpl alignment
- fix interval::valid
- subRange dla vectora i spana
- Size<Type> can be used instead of sizeof(); it can be specialized thus decreasing dependencies

- function arguments could have invariants in them:
  T Segment::at(Checked<double, [](double v) { return v >= 0.0 && v <= 1.0; })> {}

- Still more advanced asserts would be useful?
- check if gdb is already attached and behave properly in such cases

- Math:
	- length_sq in ISegment ?
	- Box<T, N> as other classes ?
	- segment, box::empty -> degenerate ?
	- isnan checks in all math classes (paranoid in vectors as well ?)
	- ujednolicić: Ray3F, IBox
	-  make Triangle it modifiable? some other classes don't keep any invariants either?
	   but on the other hand, we could add some checks for nans and infinities...
	   add type: FiniteFloat (float which is not a nan and is not an infinity)
	- Box & EnableInDimension doesn't support 4th dimension
	- box ranges...
	- intersection -> intersect ?
	- inset & enlarge na zewnątrz ?
	- minimize use of asRay(), check all places
	- fix isNormalized, areClose ?
	- Think about accuracy of different math functions. Some of tem could be easily improved
	- encloseTransformed wrong order
	- naming: rotateVector(pos)
	- isDegenerate w trójkątach, segmentach, etc.
	- mulPoint, mulNormal: better names

- Kolorki:
	- konwersja kolor na bool (!= ColorId::transparent)
	- wolna konwersja kolorów z ColorId
	- cleanup colors (where ICOLOR, where FColor should be used); Conversion ColorId -> IColor
	  FCOLOr sux (operations only on alpha part or only on color part)

- Input:
	- Mouse grabbing doesnt work
	- Bug: keyDown(InputKey::tab) doesn't work
	- Mouse Position should be -1/-1 or none when mouse is outside of window ?

- fwk_assert powinno być ogólno dostępne, tak żeby wszędzie z tego korzystać
- DASSERTY często nie wystarczają; chcielibyśmy mieć dokładniesze informacje (jakie dane konkretnie są zepsute?)
- możliwość dodania suffixa do ścieżki FilePath (+em?)
- można robić struktury drzewiaste bazujące na wektorach! (tak jak robiłeś listę bazując na dwóch wektorach, tak samo
  możesz zrobić z drzewem)

- Promienie bazujące na intach mogą być zaprezentowane za pomocą segmentów; dzięki temu nie
  potrzebne są Rationale

- attach GDB on Ctrl-C
- move SerializeAsPod to namespace detail
- make default serialize_as_pod be based on is_trivially_copyable / etc.
  or maybe not (pointers...)
- change order in FWK_ORDER_BY for vectors ?
- move box to fwk_box ?

- copyable_ptr (unique_ptr but with copying ability (why the hell it doesn't have it?))
- profiler sux; fix it?
- same algorithms on top of dynamic or static structure: ImmutableGraph, MutableGraph share with shared interface ?
- remove math.h, etc from includes for ; On the other hand: they will end up in PCH anyway
- operator== for CRanges ?

- ref(vector) returns vector<> with reference flag acts as a reference to a vector
  keeping ref(vector) in local context can be more efficient than keeping reference
  that would require keeping ref_count in vector ?

- TaggedId<Type>: id for accessing vector<Type> ? generalize it somehow ?
- Tagged Value, Tagged Pair
- Tagged Type

- Improve assertions (they should give more information when breaking)...
  But how to do it properly?

- check if double constants are correct
- printing for Variant ?

- SERIALIZE_AS_POD cathces fwk namespace
- model_viewer.exe displays models in different order (findFiles function must be working differently)

- better std::pair ?
- better tests for vector? Use tests from libc++ or something?
- Make custom string class (not a template)
- separate vector allocator specialized with element size
  this allocator could also store some data before first element
- dodać irange do vector-a
- vector[-1] indeksuje od konca?
- shrink_to_fit dla vectora?

- support for multiple armatures in exporter; support for animation without armatures
- make AnimaedMesh similar to AnimatedModel
- add class VertexArraySpec and use it to verify drawcalls
- saving/loading Mesh colors to XML
- Separate model matrix from view matrix in MatrixStack?
- MemorySaver should increase it's size if necessary
- add StrongBaseType<> class
- think about usefulness of const correctness; in some cases were just wasting time
- separate align function for fonts
- Hide HAlign, VAlign inside fontstyle?
- removeIndicies should use materialset
- make makeUnique not use resize (use erase)
- setscissorrect should check if rect is empty or not

- more todos in the code
- Saver, Loader -> SaveStream, LoadStream or similar
- normalize -> normalized

- __attribute__((cold)) on throwException (all code that leads to it
  should be inside cold section)
- clamp doesn't work properly when max < min

- Fix satTest (when edges from two objects are the same, you will get 0 normals)

- VSYNC under windows
- Fix problem in Cache when get_immutable_ptr() return null
- input key tab doesnt work
- use A-buffer for rendering transparent objects (will be useful for SSAO as well)

- Optimize kerning loop in font_factory.cpp
- Fix TODO in filesystem_linux (regarding links).
- In fact, just fix all TODOs
- Think about moving globla functions to classes / namespaces (especially functions in fwk_profile.h)
- scanf's are very slow compared to strto*, maybe we should change printfs as well in text printer?

- ModelNodes should be more flexible when creating (no need for empty root node, nodes with empty names should be ok, etc.)

- tools/model_viewer crashes when wrong path is passed (for example folder instead of path to .model file)

- When LLDB is attached, make it catch all throws automatically
- Serialization of floats to XML isn't accurate; fix it
