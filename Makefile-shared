# Options:
#   PLATFORM:        linux, mingw or html
#   [FWK_]MODE:      release or debug [-paranoid] [-nans]
#   ADD_FLAGS:       additional compiler flags
#   COMPILER:        name of the compiler; clang++ or g++ is used by default
#   LINKER:          name of linker; by default same as compiler
#   MINGW_PREFIX:    prefix for mingw toolset; Can be set in the environment
#
# TODO: z poziomu tego skryptu czasami chcemy przekazywac flagi do FWK a czasami
#       chcemy, żeby działały tylko aktualnie

VALID_PLATFORMS  := linux mingw html
VALID_MODES      := debug debug-nans release release-nans release-paranoid release-paranoid-nans

PLATFORM         = linux
MODE            ?= release
FWK_MODE        ?= $(MODE)
MINGW_PREFIX    ?= x86_64-w64-mingw32.static.posix-
LINKER           = $(COMPILER)

COMPILER_linux  := clang++
COMPILER_mingw  := $(MINGW_PREFIX)g++
COMPILER_html   := emcc
COMPILER        := $(COMPILER_$(PLATFORM))

COMPILER_TYPE   := $(if $(findstring clang,$(COMPILER)),clang,$(if $(findstring mingw,$(PLATFORM)),gcc,clang))

TOOLSET_PREFIX_mingw := $(MINGW_PREFIX)
TOOLSET_PREFIX       := $(TOOLSET_PREFIX_$(PLATFORM))

ARCHIVER             := $(TOOLSET_PREFIX)ar
STRIPPER             := $(TOOLSET_PREFIX)strip
PKG_CONFIG           := $(TOOLSET_PREFIX)pkg-config

PROGRAM_SUFFIX_mingw := .exe
PROGRAM_SUFFIX_html  := .html
PROGRAM_SUFFIX       := $(PROGRAM_SUFFIX_$(PLATFORM))

FWK_BUILD_DIR        := $(FWK_DIR)build/$(PLATFORM)_$(FWK_MODE)
FWK_LIB_FILE         := $(FWK_DIR)lib/libfwk_$(PLATFORM)_$(FWK_MODE).a
FWK_MODELCONV_FILE   := $(FWK_DIR)tools/model_convert$(PROGRAM_SUFFIX)

FWK_GEOM             := enabled
FWK_IMGUI            := $(if $(wildcard extern/imgui/imgui.h),enabled,disabled)

# --- Checking for errors -------------------------------------------------------------------------

ifeq ($(filter $(VALID_PLATFORMS),$(PLATFORM)),)
$(info Valid platforms: $(VALID_PLATFORMS))
$(error ERROR: invalid PLATFORM specified: $(PLATFORM))
endif

ifeq ($(filter $(VALID_MODES),$(MODE)),)
$(info Valid modes: $(VALID_MODES))
$(error ERROR: invalid MODE specified: $(MODE))
endif

ifndef FWK_DIR
($error ERROR: FWK_DIR undefined)
endif

# --- Compilation & linking flags -----------------------------------------------------------------

FWK_LIBS_shared  += freetype2 sdl2 libpng vorbisfile
FWK_LIBS_linux   += $(shell $(PKG_CONFIG) --libs $(FWK_LIBS_shared)) -lopenal -lGL -lGLU -lrt -lm -lstdc++
FWK_LIBS_mingw   += $(shell $(PKG_CONFIG) --libs $(FWK_LIBS_shared)) -lOpenAL32 -ldsound -lole32 -lwinmm \
                    -lglu32 -lopengl32 -lws2_32 -limagehlp

# Clang gives no warnings for uninitialized class members!
#TODO:-Wno-strict-overflow
FWK_FLAGS_shared += -I$(FWK_DIR)include/ -fno-exceptions -std=c++2a \
                    -Wall -Wextra -Woverloaded-virtual -Wnon-virtual-dtor -Wno-reorder -Wuninitialized \
                    -Wno-unused-function -Werror=switch -Wno-unused-variable -Wno-unused-parameter \
                    -Wparentheses -Wno-overloaded-virtual
FWK_FLAGS_clang  += -Wconstant-conversion -Werror=return-type -Wno-undefined-inline
FWK_FLAGS_gcc    += -Werror=aggressive-loop-optimizations -Wno-unused-but-set-variable

ifneq ("$(wildcard $(FWK_DIR)checker.so)","")
FWK_FLAGS_clang  += -Xclang -load -Xclang  $(realpath $(FWK_DIR)checker.so) -Xclang -add-plugin -Xclang check-fwk-exceptions
endif

FWK_FLAGS_release+= -O3
FWK_FLAGS_debug  += -O0 -DFWK_PARANOID

FWK_FLAGS_linux  += -pthread -ggdb -DFWK_TARGET_LINUX 
FWK_FLAGS_mingw  += -pthread -ggdb -DFWK_TARGET_MINGW -msse2 -mfpmath=sse

FWK_FLAGS += $(FWK_FLAGS_$(MODE)) $(FWK_FLAGS_$(PLATFORM)) $(FWK_FLAGS_shared) $(FWK_FLAGS_$(COMPILER_TYPE))
FWK_FLAGS += $(if $(findstring enabled,$(FWK_GEOM)),,-DFWK_GEOM_DISABLED)
FWK_FLAGS += $(if $(findstring enabled,$(FWK_IMGUI)),,-DFWK_IMGUI_DISABLED)
FWK_FLAGS += $(if $(findstring nans,$(MODE)),-DFWK_CHECK_NANS,)
FWK_FLAGS += $(if $(findstring paranoid,$(MODE))$(findstring debug,$(MODE)),-DFWK_PARANOID,)
FWK_FLAGS += $(ADD_FLAGS)

FWK_LDFLAGS_clang = -fuse-ld=gold
FWK_LDFLAGS_linux = -rdynamic
FWK_LDFLAGS       = -pthread  $(FWK_LIBS_$(PLATFORM)) $(FWK_LDFLAGS_$(PLATFORM)) $(FWK_LDFLAGS_$(COMPILER_TYPE))

#HTML5_NICE_FLAGS=-s ASSERTIONS=2 -s DISABLE_EXCEPTION_CATCHING=0 -g2
#HTML5_FLAGS=-DFWK_TARGET_HTML5 -DNDEBUG --memory-init-file 0 -s USE_SDL=2 -s USE_LIBPNG=1 -s USE_VORBIS=1 \
			--embed-file data/ $(INCLUDES) $(FLAGS) $(CLANG_FLAGS)

# --- Helper functions ----------------------------------------------------------------------------

# Filters existing files from fiven file list
# Arguments: subdir_list, file_list
filter-existing = $(filter $(shell find $(1) -type f),$(2))

# --- Build targets for libfwk users --------------------------------------------------------------

ifneq ($(FWK_DIR),)
FWK_MAKE_ARGS  = -C $(FWK_DIR) PLATFORM=$(PLATFORM) MODE=$(FWK_MODE)
FWK_LDFLAGS   += -L $(FWK_DIR)lib -lfwk_$(PLATFORM)_$(FWK_MODE)

$(FWK_LIB_FILE): .always_check
	$(MAKE) $(FWK_MAKE_ARGS) lib/libfwk_$(PLATFORM)_$(FWK_MODE).a
$(FWK_MODELCONV_FILE): .always_check
	$(MAKE) $(FWK_MAKE_ARGS) tools/model_convert$(PROGRAM_SUFFIX)

endif

.always_check:
